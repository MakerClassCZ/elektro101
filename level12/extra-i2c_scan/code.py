"""
LEVEL 12 - I2C Scanner

ZAPOJEN√ç OBVODU:
P≈ôipojte jak√°koliv I2C za≈ô√≠zen√≠ na sbƒõrnici:
- SDA k GP16 (modr√°)
- SCL k GP17 (≈ælut√°)
- VCC k 3V3
- GND k GND

JAK FUNGUJE I2C SKENOV√ÅN√ç:
Tento skript projde v≈°echny mo≈æn√© I2C adresy (0x08-0x77) a pokus√≠ se
s ka≈ædou komunikovat. Pokud za≈ô√≠zen√≠ odpov√≠, vyp√≠≈°e jeho adresu.
Ka≈æd√© I2C za≈ô√≠zen√≠ m√° unik√°tn√≠ adresu - SHT40 m√° 0x44, SSD1306 m√° 0x3C.

NOV√â KONCEPTY:
- Skenov√°n√≠ I2C sbƒõrnice
- I2C adresy za≈ô√≠zen√≠ (hexadecim√°lnƒõ)
- Detekce p≈ôipojen√Ωch za≈ô√≠zen√≠
- Try/except pro testov√°n√≠ komunikace
"""

# import knihoven pro pr√°ci s hardware
import board           # p≈ô√≠stup k pin≈Øm a hardware za≈ô√≠zen√≠
import busio           # I2C komunikace
import time            # funkce pro ƒçek√°n√≠ a pr√°ci s ƒçasem

print("üîç I2C SCANNER")
print("Skenov√°n√≠ I2C sbƒõrnice na GP16/GP17...")
print()

# vytvo≈ôen√≠ I2C sbƒõrnice
i2c = busio.I2C(board.GP17, board.GP16)  # SCL, SDA

try:
    # ƒçek√°n√≠ na inicializaci I2C
    while not i2c.try_lock():
        pass
    
    print("Skenov√°n√≠ adres 0x08 - 0x77...")
    print()
    
    # seznam nalezen√Ωch za≈ô√≠zen√≠
    nalezena_zarizeni = []
    
    # skenov√°n√≠ v≈°ech mo≈æn√Ωch I2C adres
    for adresa in range(0x08, 0x78):  # standardn√≠ rozsah I2C adres
        try:
            # pokus o komunikaci s adresou
            i2c.writeto(adresa, b'')
            
            # pokud nedo≈°lo k chybƒõ, za≈ô√≠zen√≠ odpovƒõdƒõlo
            hex_adresa = hex(adresa)
            print(f"‚úÖ Nalezeno za≈ô√≠zen√≠ na adrese: {hex_adresa} ({adresa})")
            nalezena_zarizeni.append((hex_adresa, adresa))
            
        except OSError:
            # ≈æ√°dn√© za≈ô√≠zen√≠ na t√©to adrese
            pass
    
    print()
    print(f"Skenov√°n√≠ dokonƒçeno!")
    print(f"Nalezeno celkem: {len(nalezena_zarizeni)} za≈ô√≠zen√≠")
    
    if nalezena_zarizeni:
        print()
        print("üìã SEZNAM NALEZEN√ùCH ZA≈ò√çZEN√ç:")
        for hex_addr, dec_addr in nalezena_zarizeni:
            # rozpozn√°n√≠ zn√°m√Ωch za≈ô√≠zen√≠ podle adresy
            if dec_addr == 0x44:
                nazev = "SHT40 (teplota/vlhkost)"
            elif dec_addr in [0x3C, 0x3D]:
                nazev = "SSD1306 (OLED displej)"
            elif dec_addr == 0x76 or dec_addr == 0x77:
                nazev = "BME280/BMP280 (tlak/teplota)"
            elif dec_addr == 0x48:
                nazev = "ADS1115 (ADC)"
            elif dec_addr == 0x68:
                nazev = "MPU6050/GY-521 (IMU 6-axis)"
            elif dec_addr == 0x69:
                nazev = "MPU6050/GY-521 (IMU 6-axis, alt. adresa)"
            elif dec_addr == 0x40:
                nazev = "PCA9685 (PWM driver)"
            else:
                nazev = "Nezn√°m√© za≈ô√≠zen√≠"
            
            print(f"  ‚Ä¢ {hex_addr}: {nazev}")
    else:
        print()
        print("‚ùå ≈Ω√°dn√° za≈ô√≠zen√≠ nenalezena!")
        print()
        print("Mo≈æn√© p≈ô√≠ƒçiny:")
        print("- ≈Ω√°dn√° I2C za≈ô√≠zen√≠ nejsou p≈ôipojena")
        print("- ≈†patn√© zapojen√≠ SDA/SCL")
        print("- Chyb√≠ nap√°jen√≠ za≈ô√≠zen√≠")
        print("- Chyb√≠ pull-up odpory (obvykle jsou na modulech)")

finally:
    # uvolnƒõn√≠ I2C sbƒõrnice
    i2c.unlock()
    i2c.deinit()
    print()
    print("I2C sbƒõrnice uvolnƒõna")
