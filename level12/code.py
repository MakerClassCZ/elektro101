"""
LEVEL 12 - OLED Display s teplotn√≠m senzorem SHT40

ZAPOJEN√ç OBVODU:
Na I2C sbƒõrnici p≈ôipoj√≠me dva moduly:

1) SHT40 senzor teploty a vlhkosti:
   - VDD k 3V3
   - GND k zemi (GND)
   - SDA k GP16 (I2C data - modr√°)
   - SCL k GP17 (I2C clock - ≈ælut√°)

2) OLED Display SSD1306 128x64:
 - P≈ôipojen√Ω  na sbƒõrnici pomoc√≠ u≈†up

JAK FUNGUJE I2C S V√çCE ZA≈ò√çZEN√çMI:
Kr√°sa I2C protokolu je v tom, ≈æe na jednu sbƒõrnici m≈Ø≈æeme p≈ôipojit v√≠ce
za≈ô√≠zen√≠. Ka≈æd√© m√° unik√°tn√≠ adresu:
- SHT40 m√° adresu 0x44
- SSD1306 m√° obvykle adresu 0x3C nebo 0x3D
Master (Pico) komunikuje s ka≈æd√Ωm zvl√°≈°≈• podle adresy.

NOV√â KONCEPTY:
- OLED display SSD1306 (128x64 pixel≈Ø)
- V√≠ce za≈ô√≠zen√≠ na jedn√© I2C sbƒõrnici
- Textov√© zobrazen√≠ na displeji
- Knihovna displayio pro grafiku
- Kombinace senzoru a displeje
"""

# import knihoven pro pr√°ci s hardware
import board           # p≈ô√≠stup k pin≈Øm a hardware za≈ô√≠zen√≠
import busio           # I2C komunikace
import time            # funkce pro ƒçek√°n√≠ a pr√°ci s ƒçasem
import displayio       # z√°kladn√≠ grafick√© operace
import terminalio      # vestavƒõn√Ω font
import adafruit_displayio_ssd1306  # knihovna pro SSD1306 OLED
import adafruit_sht4x  # knihovna pro SHT40 senzor
from adafruit_display_text import label  # textov√© popisky

# vytvo≈ôen√≠ I2C sbƒõrnice (sd√≠len√° pro SHT40 i OLED)
i2c = busio.I2C(board.GP17, board.GP16)  # SCL, SDA

# inicializace SHT40 senzoru
sht = adafruit_sht4x.SHT4x(i2c)

# inicializace OLED displeje
displayio.release_displays()  # uvolnƒõn√≠ p≈ô√≠padn√Ωch p≈ôedchoz√≠ch displej≈Ø
display_bus = displayio.I2CDisplay(i2c, device_address=0x3C)
display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=64)

print("üå°Ô∏èüì∫ SHT40 + OLED DISPLEJ")
print("Zobrazen√≠ teploty a vlhkosti na OLED displeji")
print("I2C piny: SDA=GP16, SCL=GP17")
print("I2C adresy: SHT40=0x44, SSD1306=0x3C")
print()

# vytvo≈ôen√≠ skupiny pro zobrazen√≠ textu
main_group = displayio.Group()

# vytvo≈ôen√≠ textov√Ωch popisk≈Ø
title_label = label.Label(terminalio.FONT, text="SHT40 Senzor", color=0xFFFFFF, x=25, y=10)
temp_label = label.Label(terminalio.FONT, text="Teplota:", color=0xFFFFFF, x=5, y=25)
temp_value = label.Label(terminalio.FONT, text="--.-¬∞C", color=0xFFFFFF, x=70, y=25)
hum_label = label.Label(terminalio.FONT, text="Vlhkost:", color=0xFFFFFF, x=5, y=40)
hum_value = label.Label(terminalio.FONT, text="--.-%", color=0xFFFFFF, x=70, y=40)
time_label = label.Label(terminalio.FONT, text="00:00", color=0xFFFFFF, x=85, y=55)

# p≈ôid√°n√≠ v≈°ech popisk≈Ø do skupiny
main_group.append(title_label)
main_group.append(temp_label)
main_group.append(temp_value)
main_group.append(hum_label)
main_group.append(hum_value)
main_group.append(time_label)

# zobrazen√≠ skupiny na displeji
display.root_group = main_group

# promƒõnn√© pro ƒças
start_time = time.monotonic()

# hlavn√≠ smyƒçka zobrazov√°n√≠ dat
try:
    while True:
        # ƒçten√≠ teploty a vlhkosti z SHT40
        teplota = sht.temperature
        vlhkost = sht.relative_humidity
        
        # aktualizace text≈Ø na displeji
        temp_value.text = f"{teplota:.1f}¬∞C"
        hum_value.text = f"{vlhkost:.1f}%"
        
        # p≈ôesn√© poƒç√≠t√°n√≠ ƒçasu pomoc√≠ monotonic
        uplynuly_cas = time.monotonic() - start_time
        minuty = int(uplynuly_cas) // 60
        sekundy = int(uplynuly_cas) % 60
        time_label.text = f"{minuty:02d}:{sekundy:02d}"
        
        # zobrazen√≠ dat tak√© v konzoli
        print(f"Teplota: {teplota:.1f}¬∞C, Vlhkost: {vlhkost:.1f}%, ƒåas: {minuty:02d}:{sekundy:02d}")
        
        # ƒçek√°n√≠ 1 sekundu
        time.sleep(1)

finally: 
    i2c.deinit()
    print("I2C sbƒõrnice uvolnƒõna")
