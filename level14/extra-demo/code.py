"""
LEVEL 14 - NeoPixel Matrix 4x4 - Z√°kladn√≠ ovl√°d√°n√≠

ZAPOJEN√ç OBVODU:
Pro tento level pot≈ôebujeme NeoPixel matrix 4x4:
- VCC k 3V3 nebo 5V (podle specifikace matice)
- GND k zemi (GND)
- DIN (Data Input) k GP18 (PWM v√Ωstup)

POZN√ÅMKA: NeoPixel matrix m≈Ø≈æe pot≈ôebovat extern√≠ nap√°jen√≠ p≈ôi pln√©m jasu.
Pro testov√°n√≠ a ni≈æ≈°√≠ jas by mƒõlo staƒçit nap√°jen√≠ z Pico.

JAK FUNGUJE NEOPIXEL:
NeoPixel (WS2812) jsou adresovateln√© RGB LED diody. Ka≈æd√° dioda obsahuje:
- ƒåerven√Ω, zelen√Ω a modr√Ω LED ƒçip
- Integrovan√Ω ≈ôadiƒç (driver chip)
- Mo≈ænost ≈ôetƒõzen√≠ v√≠ce diod za sebou

Matrix 4x4 = 16 LED diod s indexy 0-15, uspo≈ô√°dan√© podle sch√©matu v√Ωrobce.

NOV√â KONCEPTY:
- Adresovateln√© RGB LED (NeoPixel/WS2812)
- PWM sign√°l pro ≈ô√≠zen√≠ barev (24-bit RGB)
- Matrix indexov√°n√≠ (2D -> 1D mapov√°n√≠)
- Barevn√© prostory (RGB, HSV)
- Animace a efekty
"""

# import knihoven pro pr√°ci s hardware
import board        # p≈ô√≠stup k pin≈Øm a hardware za≈ô√≠zen√≠
import neopixel     # knihovna pro NeoPixel LED
import time         # funkce pro ƒçek√°n√≠ a pr√°ci s ƒçasem

# konfigurace NeoPixel matrix 4x4
NEOPIXEL_PIN = board.GP18     # pin pro data sign√°l
NUM_PIXELS = 16               # poƒçet LED v matici (4x4)
BRIGHTNESS = 0.3              # jas (0.0 - 1.0, pozor na spot≈ôebu!)

# vytvo≈ôen√≠ NeoPixel objektu
pixels = neopixel.NeoPixel(NEOPIXEL_PIN, NUM_PIXELS, brightness=BRIGHTNESS, auto_write=False)

# z√°kladn√≠ barvy (RGB hodnoty 0-255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
CYAN = (0, 255, 255)
MAGENTA = (255, 0, 255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# seznam barev pro animace
COLORS = [RED, GREEN, BLUE, YELLOW, CYAN, MAGENTA, WHITE]

def clear_matrix():
    """Vyƒçist√≠ v≈°echny LED (vypne je)"""
    pixels.fill(BLACK)
    pixels.show()

def set_pixel(x, y, color):
    """
    Nastav√≠ barvu pixelu na pozici x, y (0-3)
    Mapuje 2D sou≈ôadnice na 1D index podle typick√©ho zapojen√≠ matrix
    """
    if 0 <= x < 4 and 0 <= y < 4:
        # Typick√© mapov√°n√≠ pro 4x4 matrix (m≈Ø≈æe se li≈°it podle v√Ωrobce)
        # ≈ò√°dky se st≈ô√≠daj√≠: 0->3 zleva doprava, 4->7 zprava doleva, atd.
        if y % 2 == 0:  # sud√© ≈ô√°dky (0, 2) - zleva doprava
            index = y * 4 + x
        else:  # lich√© ≈ô√°dky (1, 3) - zprava doleva
            index = y * 4 + (3 - x)
        
        pixels[index] = color

def show_pattern(pattern_name, color=RED):
    """Zobraz√≠ p≈ôedefinovan√Ω vzor"""
    
    if pattern_name == "cross":
        # K≈ô√≠≈æ
        clear_matrix()
        for i in range(4):
            set_pixel(i, 1, color)  # horizont√°ln√≠ ƒç√°ra
            set_pixel(1, i, color)  # vertik√°ln√≠ ƒç√°ra
    
    elif pattern_name == "corners":
        # Rohy
        clear_matrix()
        set_pixel(0, 0, color)
        set_pixel(3, 0, color)
        set_pixel(0, 3, color)
        set_pixel(3, 3, color)
    
    elif pattern_name == "frame":
        # R√°meƒçek
        clear_matrix()
        for i in range(4):
            set_pixel(i, 0, color)    # horn√≠ ≈ôada
            set_pixel(i, 3, color)    # doln√≠ ≈ôada
            set_pixel(0, i, color)    # lev√Ω sloupec
            set_pixel(3, i, color)    # prav√Ω sloupec
    
    elif pattern_name == "diagonal":
        # Diagon√°la
        clear_matrix()
        for i in range(4):
            set_pixel(i, i, color)
    
    elif pattern_name == "checkerboard":
        # ≈†achovnice
        clear_matrix()
        for x in range(4):
            for y in range(4):
                if (x + y) % 2 == 0:
                    set_pixel(x, y, color)
    
    pixels.show()

def rainbow_cycle():
    """Duuhov√Ω cyklus v≈°emi LED"""
    for j in range(256):
        for i in range(NUM_PIXELS):
            # HSV do RGB p≈ôevod pro duhov√Ω efekt
            pixel_hue = (i * 256 // NUM_PIXELS + j) % 256
            pixels[i] = wheel(pixel_hue)
        pixels.show()
        time.sleep(0.02)

def wheel(pos):
    """
    Generuje barvy pro duhov√Ω efekt (0-255)
    Vrac√≠ RGB tuple
    """
    if pos < 85:
        return (pos * 3, 255 - pos * 3, 0)
    elif pos < 170:
        pos -= 85
        return (255 - pos * 3, 0, pos * 3)
    else:
        pos -= 170
        return (0, pos * 3, 255 - pos * 3)

def breathing_effect(color, duration=2.0):
    """Efekt d√Ωch√°n√≠ - postupn√© rozsv√≠cen√≠ a zhasnut√≠"""
    steps = 50
    for brightness in range(steps):
        # Postupn√© rozsvƒõcov√°n√≠
        factor = brightness / steps
        dimmed_color = (int(color[0] * factor), int(color[1] * factor), int(color[2] * factor))
        pixels.fill(dimmed_color)
        pixels.show()
        time.sleep(duration / (steps * 2))
    
    for brightness in range(steps, 0, -1):
        # Postupn√© zhas√≠n√°n√≠
        factor = brightness / steps
        dimmed_color = (int(color[0] * factor), int(color[1] * factor), int(color[2] * factor))
        pixels.fill(dimmed_color)
        pixels.show()
        time.sleep(duration / (steps * 2))

print("üåà NEOPIXEL MATRIX 4x4")
print("Z√°kladn√≠ vzory a animace")
print("Stisknƒõte Ctrl+C pro ukonƒçen√≠")
print()

# hlavn√≠ smyƒçka s r≈Øzn√Ωmi efekty
try:
    while True:
        print("üìç Zobrazuji k≈ô√≠≈æ...")
        show_pattern("cross", RED)
        time.sleep(2)
        
        print("üìê Zobrazuji rohy...")
        show_pattern("corners", GREEN)
        time.sleep(2)
        
        print("üî≤ Zobrazuji r√°meƒçek...")
        show_pattern("frame", BLUE)
        time.sleep(2)
        
        print("üìè Zobrazuji diagon√°lu...")
        show_pattern("diagonal", YELLOW)
        time.sleep(2)
        
        print("‚ôüÔ∏è Zobrazuji ≈°achovnici...")
        show_pattern("checkerboard", MAGENTA)
        time.sleep(2)
        
        print("üå¨Ô∏è Efekt d√Ωch√°n√≠...")
        breathing_effect(CYAN)
        
        print("üåà Duhov√Ω cyklus...")
        rainbow_cycle()
        
        print("‚è∏Ô∏è Pauza...")
        clear_matrix()
        time.sleep(1)

except KeyboardInterrupt:
    print("\nüî¥ Ukonƒçuji program...")
    clear_matrix()
    print("Matrix vypnuta")
