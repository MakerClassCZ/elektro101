"""
LEVEL 15 - NeoPixel Matrix + Akcelerometr - Kuliƒçka na n√°klonu

ZAPOJEN√ç OBVODU:
Kombinujeme hardware z Level 13 a Level 14:

1) NeoPixel matrix 4x4:
   - VCC k 3V3 nebo 5V
   - GND k zemi (GND)
   - DIN k GP18

2) MPU6500/MPU6050 akcelerometr (I2C):
   - VCC k 3V3
   - GND k zemi (GND)
   - SDA k GP16 (I2C data - modr√°)
   - SCL k GP17 (I2C clock - ≈ælut√°)

3) Pasivn√≠ bzuƒç√°k (pro p√≠p√°n√≠ p≈ôi n√°razu):
   - Kladn√Ω pin k GP06
   - Z√°porn√Ω pin k zemi (GND)

JAK FUNGUJE HRA:
Jednoduch√° fyzik√°ln√≠ simulace kuliƒçky na naklonƒõn√© desce:
- Kuliƒçka (LED) se pohybuje podle n√°klonu Pico
- Naklon√≠te-li Pico doprava ‚Üí kuliƒçka se val√≠ doprava
- Naklon√≠te-li Pico doleva ‚Üí kuliƒçka se val√≠ doleva
- Kuliƒçka se zastav√≠ na okraj√≠ch matice
- P≈ôi n√°razu na stƒõnu se p≈ôehraje kr√°tk√© p√≠pnut√≠

HERN√ç MECHANIKA:
- ƒåerven√° LED = kuliƒçka
- Pozice kuliƒçky se aktualizuje podle akcelerometru
- Plynul√Ω pohyb s fyzikou (rychlost, zrychlen√≠, t≈ôen√≠)
- Zastaven√≠ na okraj√≠ch matice (bez odrazu)
- Zvukov√° zpƒõtn√° vazba p≈ôi n√°razu

NOV√â KONCEPTY:
- Spojen√≠ senzoru s v√Ωstupem (input ‚Üí processing ‚Üí output)
- Hern√≠ smyƒçka (game loop)
- Z√°kladn√≠ fyzika (pozice, rychlost, zrychlen√≠)
- Mapov√°n√≠ hodnot senzoru na hern√≠ svƒõt
- Interaktivn√≠ zpƒõtn√° vazba
- Zvukov√° indikace ud√°lost√≠
"""

# import knihoven pro pr√°ci s hardware
import board                           # p≈ô√≠stup k pin≈Øm a hardware za≈ô√≠zen√≠
import busio                           # I2C komunikace
import neopixel                        # knihovna pro NeoPixel LED
import time                            # funkce pro ƒçek√°n√≠ a pr√°ci s ƒçasem
import simpleio                        # modul pro jednoduch√© t√≥ny
import makerclass_accelerometer        # na≈°e univerz√°ln√≠ knihovna pro MPU senzory

# konfigurace hardware
NEOPIXEL_PIN = board.GP18
NUM_PIXELS = 16
BRIGHTNESS = 0.3
BUZZER_PIN = board.GP6                # pin pro bzuƒç√°k

# vytvo≈ôen√≠ objekt≈Ø
pixels = neopixel.NeoPixel(NEOPIXEL_PIN, NUM_PIXELS, brightness=BRIGHTNESS, auto_write=False)
i2c = busio.I2C(board.GP17, board.GP16)  # SCL, SDA
mpu = makerclass_accelerometer.MakerClassAccelerometer(i2c)

# hern√≠ konstanty
MATRIX_SIZE = 4                    # velikost matice (4x4)
BALL_COLOR = (255, 0, 0)         # ƒçerven√° kuliƒçka
BLACK = (0, 0, 0)                 # pr√°zdn√© m√≠sto

# hern√≠ promƒõnn√©
ball_x = 2.0                      # pozice kuliƒçky X (float pro plynulost)
ball_y = 2.0                      # pozice kuliƒçky Y (float pro plynulost)
ball_vel_x = 0.0                  # rychlost kuliƒçky X
ball_vel_y = 0.0                  # rychlost kuliƒçky Y

# stav kuliƒçky u zdi
was_at_left_wall = False          # byla kuliƒçka u lev√© stƒõny
was_at_right_wall = False         # byla kuliƒçka u prav√© stƒõny
was_at_top_wall = False           # byla kuliƒçka u horn√≠ stƒõny
was_at_bottom_wall = False        # byla kuliƒçka u doln√≠ stƒõny

# fyzik√°ln√≠ konstanty
SENSITIVITY = 15.0                # citlivost na n√°klon
FRICTION = 0.85                   # t≈ôen√≠ (zpomalov√°n√≠)
MIN_VELOCITY = 0.01               # minim√°ln√≠ rychlost (zastaven√≠)

# konstanty pro p√≠p√°n√≠ p≈ôi n√°razu
BUMP_FREQUENCY = 600              # frekvence p√≠pnut√≠ p≈ôi n√°razu (Hz)
BUMP_DURATION = 0.05              # d√©lka p√≠pnut√≠ (sekundy)

def clear_matrix():
    """Vyƒçist√≠ celou matici"""
    pixels.fill(BLACK)

def set_pixel(x, y, color):
    """Nastav√≠ pixel na pozici x, y (0-3)"""
    if 0 <= x < MATRIX_SIZE and 0 <= y < MATRIX_SIZE:
        # Mapov√°n√≠ 2D sou≈ôadnic na 1D index
        if y % 2 == 0:  # sud√© ≈ô√°dky - zleva doprava
            index = y * MATRIX_SIZE + x
        else:           # lich√© ≈ô√°dky - zprava doleva
            index = y * MATRIX_SIZE + (MATRIX_SIZE - 1 - x)
        
        pixels[index] = color

def update_physics():
    """Aktualizuje fyziku kuliƒçky podle akcelerometru"""
    global ball_x, ball_y, ball_vel_x, ball_vel_y
    global was_at_left_wall, was_at_right_wall, was_at_top_wall, was_at_bottom_wall
    
    # ƒåten√≠ akcelerometru
    accel_x, accel_y, accel_z = mpu.acceleration
    
    # Mapov√°n√≠ n√°klonu na s√≠lu (spr√°vn√© smƒõry)
    force_x = accel_y / SENSITIVITY   # n√°klon doprava/doleva
    force_y = -accel_x / SENSITIVITY  # n√°klon dop≈ôedu/dozadu
    
    # Aplikace s√≠ly na rychlost
    ball_vel_x += force_x
    ball_vel_y += force_y
    
    # Aplikace t≈ôen√≠
    ball_vel_x *= FRICTION
    ball_vel_y *= FRICTION
    
    # Zastaven√≠ p≈ôi velmi mal√© rychlosti
    if abs(ball_vel_x) < MIN_VELOCITY:
        ball_vel_x = 0
    if abs(ball_vel_y) < MIN_VELOCITY:
        ball_vel_y = 0
    
    # Aktualizace pozice
    ball_x += ball_vel_x
    ball_y += ball_vel_y
    
    # Omezen√≠ na hranice matice a detekce n√°razu
    bumped = False  # p≈ô√≠znak n√°razu
    
    # Lev√° stƒõna (X = 0)
    if ball_x < 0:
        ball_x = 0
        ball_vel_x = 0
        if not was_at_left_wall:  # nov√Ω n√°raz
            bumped = True
        was_at_left_wall = True
    else:
        was_at_left_wall = False
    
    # Prav√° stƒõna (X = 3)
    if ball_x >= MATRIX_SIZE - 1:
        ball_x = MATRIX_SIZE - 1
        ball_vel_x = 0
        if not was_at_right_wall:  # nov√Ω n√°raz
            bumped = True
        was_at_right_wall = True
    else:
        was_at_right_wall = False
    
    # Horn√≠ stƒõna (Y = 0)
    if ball_y < 0:
        ball_y = 0
        ball_vel_y = 0
        if not was_at_top_wall:  # nov√Ω n√°raz
            bumped = True
        was_at_top_wall = True
    else:
        was_at_top_wall = False
    
    # Doln√≠ stƒõna (Y = 3)
    if ball_y >= MATRIX_SIZE - 1:
        ball_y = MATRIX_SIZE - 1
        ball_vel_y = 0
        if not was_at_bottom_wall:  # nov√Ω n√°raz
            bumped = True
        was_at_bottom_wall = True
    else:
        was_at_bottom_wall = False
    
    # P√≠pnut√≠ p≈ôi nov√©m n√°razu na stƒõnu
    if bumped:
        simpleio.tone(BUZZER_PIN, BUMP_FREQUENCY, BUMP_DURATION)

def render_game():
    """Vykresl√≠ hern√≠ sc√©nu"""
    # Vyƒçisti matici
    clear_matrix()
    
    # Zobraz kuliƒçku na aktu√°ln√≠ pozici
    pixel_x = int(round(ball_x))
    pixel_y = int(round(ball_y))
    set_pixel(pixel_x, pixel_y, BALL_COLOR)
    
    # Aktualizuj displej
    pixels.show()

def print_debug_info():
    """Vyp√≠≈°e debug informace o stavu hry"""
    accel_x, accel_y, accel_z = mpu.acceleration
    debug_text = f"Pozice: ({ball_x:.1f}, {ball_y:.1f}) | Rychlost: ({ball_vel_x:.2f}, {ball_vel_y:.2f}) | Akcelerometr: X:{accel_x:.1f} Y:{accel_y:.1f}"
    print(debug_text)

print("üéÆ KULIƒåKA NA N√ÅKLONU")
print("Nakl√°nƒõn√≠m Pico ovl√°d√°te ƒçervenou kuliƒçku")
print("Kuliƒçka se zastav√≠ na okraj√≠ch matice")
print("Pozice kuliƒçky a rychlost se zobrazuj√≠ v konzoli")
print()

# hern√≠ smyƒçka
frame_count = 0
while True:
    # Aktualizuj fyziku
    update_physics()
    
    # Vykresli hru
    render_game()
    
    # Debug info ka≈æd√Ωch 10 sn√≠mk≈Ø (sn√≠≈æen√≠ spamu v konzoli)
    if frame_count % 10 == 0:
        print_debug_info()
    
    frame_count += 1
    
    # Hern√≠ sn√≠mkov√° frekvence (cca 20 FPS)
    time.sleep(0.05)
